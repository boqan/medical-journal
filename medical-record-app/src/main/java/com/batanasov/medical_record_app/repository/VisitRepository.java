package com.batanasov.medical_record_app.repository;

import com.batanasov.medical_record_app.model.Visit;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;

@Repository
public interface VisitRepository extends MongoRepository<Visit, String> {

     List<Visit> findByDoctorId(String doctorId);
     List<Visit> findByPatientId(String patientId);

     /**
      * Finds all visits that have diagnosisIds containing the given diagnosisId.
      * We do this via a Mongo query:
      * { "diagnosisIds": { $in: [ <diagnosisId> ] } }
      */
     @Query("{ 'diagnosisIds': { $in: [?0] } }")
     List<Visit> findByDiagnosisIds(String diagnosisId);

     /**
      * Finds all visits whose visitDate is between start and end (inclusive).
      * Generated by Spring Data's derived query naming convention.
      */
     List<Visit> findByVisitDateBetween(LocalDate start, LocalDate end);

     /**
      * Finds visits for a specific doctor within a date range.
      * We rely on a derived query as well:
      */
     List<Visit> findByDoctorIdAndVisitDateBetween(String doctorId, LocalDate start, LocalDate end);
}